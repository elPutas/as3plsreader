package nl.funkymonkey.utils.io.playlist {	import nl.funkymonkey.firelog.core.Logger;	import nl.funkymonkey.utils.io.playlist.events.ParseEvent;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.URLLoader;	import flash.net.URLRequest;		/*	 * PlaylistReaderTest -- Unit test for playlist reader	 * 	 * @description: Unit test (kindof) for playlist reader	 * 	 * @author sidneydekoning	 */	public class PlaylistReaderTest {		function PlaylistReaderTest() {						buildFromOnline( );			buildFromDesktop( );		}				private function buildFromOnline():void {						var loader:URLLoader = new URLLoader( );			loader.addEventListener( Event.COMPLETE , plsLoaded );			loader.addEventListener( ProgressEvent.PROGRESS , onProgress );			loader.addEventListener( IOErrorEvent.IO_ERROR , onIOError );			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR , onSecurityError );			loader.addEventListener( HTTPStatusEvent.HTTP_RESPONSE_STATUS , httStatus );						loader.load( new URLRequest( "http://www.funky-monkey.nl/air/plstest/default.pls" ) );					}					private function plsLoaded( e:Event ):void {							var value:String = e.currentTarget.data;						// Create a new file from string data			var plsFile:File = File.desktopDirectory;			plsFile.url += "/playlist.pls";			Logger.info( "url: " + plsFile.url );			Logger.info( "nativePath: " + plsFile.nativePath );			var fs:FileStream = new FileStream( );			fs.open( plsFile , FileMode.WRITE );			fs.writeUTFBytes( value );			fs.close( );									Logger.info( "====== PLS# " + plsFile + " ======" );			// instanciate new PlayListReader object with file reference			var pls:PlaylistReader = new PlaylistReader( );			pls.addEventListener( ParseEvent.FILE_PARSED , parsedPLS , false , 0 , true );			pls.source = plsFile;		}				private function httStatus( e:HTTPStatusEvent ):void {			Logger.info( e.status );		}				private function onProgress( e:Event ):void {			Logger.info( e );		}				private function onIOError( e:IOErrorEvent ):void {			Logger.info( e.text );		}				private function onSecurityError( e:Event ):void {			Logger.info( e );		}				private function buildFromDesktop():void {						// make a reference to a file on the desktop			var plsFile:File = File.desktopDirectory.resolvePath( "default.pls" );			//			Logger.info( "====== PLS# " + plsFile + " ======" );			// instanciate new PlayListReader object with file reference			var pls:PlaylistReader = new PlaylistReader( );			pls.addEventListener( ParseEvent.FILE_PARSED , parsedPLS , false , 0 , true );			pls.source = plsFile;		}				private function parsedPLS( evt:ParseEvent):void {						var plsFile:Array = evt.fileData as Array;			Logger.info( "file with extension " + evt.extension.toString( ) + " succesfully parsed." );			Logger.info( "====== PLS FILE   " + plsFile.toString( ) + " ======" );				for (var i:int = 0; i < plsFile.length ; ++i) {				Logger.info( "====== PLS Item no# " + (i + 1) + " of " + plsFile.length + " ======" );				Logger.info( "** file  : " + plsFile[i].file );				Logger.info( "** title : " + plsFile[i].title );				Logger.info( "** length: " + plsFile[i].length );			}		}	}}