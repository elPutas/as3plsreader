package nl.funkymonkey.utils.io.playlist {	import nl.funkymonkey.firelog.core.Logger;	import nl.funkymonkey.io.playlist.PlaylistReader;	import nl.funkymonkey.io.playlist.events.ParseEvent;	import nl.funkymonkey.io.playlist.types.IPlayable;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.URLLoader;	import flash.net.URLRequest;	/*	 * PlaylistReaderTest -- Unit test for playlist reader	 * 	 * @description: Unit test (kindof) for playlist reader. 	 * For this to work make sure you have two files on your desktop with names default.pls and playlist.m3u	 * 	 * @author Sidney de Koning, sidney@funky-monkey.nl	 */	public class PlaylistReaderTest {		private static const PLS_ONLINE : String = "http://www.funky-monkey.nl/air/plstest/default.pls";		private static const M3U_ONLINE : String = "http://www.funky-monkey.nl/air/plstest/playlist.m3u";		//		// 		private static const PLS_LOCAL : String = "/default.pls";		private static const M3U_LOCAL : String = "/playlist.m3u";		//		private var _url : String;		private var _file : String;				function PlaylistReaderTest() {						_url = PLS_ONLINE;			//			_url = M3U_ONLINE;			_file = M3U_LOCAL;						//			buildFromOnline( );			buildFromDesktop();		}				private function buildFromOnline() : void {						var loader : URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, plsLoaded);			loader.addEventListener(ProgressEvent.PROGRESS, onProgress);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httStatus);						loader.load(new URLRequest(_url));					}					private function plsLoaded( e : Event ) : void {							var value : String = e.currentTarget.data;						// Create a new file from string data			var plsFile : File = File.desktopDirectory;			plsFile.url += _file;			Logger.info("url: " + plsFile.url);			Logger.info("nativePath: " + plsFile.nativePath);			var fs : FileStream = new FileStream();			fs.open(plsFile, FileMode.WRITE);			fs.writeUTFBytes(value);			fs.close();									Logger.info("====== PLS# " + plsFile + " ======");			// instanciate new PlayListReader object with file reference			var pls : PlaylistReader = new PlaylistReader();			pls.addEventListener(ParseEvent.FILE_PARSED, parsedPlaylist, false, 0, true);			pls.source = plsFile;		}				private function httStatus( e : HTTPStatusEvent ) : void {			Logger.info(e.status);		}				private function onProgress( e : Event ) : void {			Logger.info(e);		}				private function onIOError( e : IOErrorEvent ) : void {			Logger.info(e.text);		}				private function onSecurityError( e : Event ) : void {			Logger.info(e);		}				private function buildFromDesktop() : void {						// make a reference to a file on the desktop			var plsFile : File = File.desktopDirectory.resolvePath(_file);			//			Logger.info("====== Playlist# " + plsFile + " ======");			// instanciate new PlayListReader object with file reference			var pls : PlaylistReader = new PlaylistReader();			pls.addEventListener(ParseEvent.FILE_PARSED, parsedPlaylist, false, 0, true);			pls.source = plsFile;		}				private function parsedPlaylist( evt : ParseEvent) : void {						var playlistFile : Array = evt.fileData as Array;			Logger.info("file with extension " + evt.extension.toString() + " succesfully parsed.");			Logger.info("====== M3U FILE   " + playlistFile.toString() + " ======");			for (var i : int = 0;i < playlistFile.length; ++i) {				Logger.info("====== M3U Item no# " + (i + 1) + " of " + playlistFile.length + " ======");				Logger.info("** file  	 : " + IPlayable(playlistFile[i]).file);				Logger.info("** title 	 : " + IPlayable(playlistFile[i]).title);				Logger.info("** length	 : " + IPlayable(playlistFile[i]).length);				Logger.info("** isStream : " + IPlayable(playlistFile[i]).isStream);			}		}	}}